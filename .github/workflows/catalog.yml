name: Download Images and Build Catalog

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install requests pandas pillow
        
    - name: Download images and process data
      run: |
        python << 'EOF'
        import pandas as pd
        import requests
        import os
        from urllib.parse import urlparse
        import time
        
        # Create directories
        os.makedirs('images', exist_ok=True)
        os.makedirs('docs', exist_ok=True)
        
        # Read products CSV
        try:
            df = pd.read_csv('products.csv')
            print(f"Loaded {len(df)} products")
            print(f"Columns found: {list(df.columns)}")
        except Exception as e:
            print(f"Error reading CSV: {e}")
            exit(1)
        
        # Auto-detect column names (flexible mapping)
        column_mapping = {}
        for col in df.columns:
            col_lower = col.lower().strip()
            if 'sku' in col_lower or 'id' in col_lower:
                column_mapping['sku'] = col
            elif 'name' in col_lower or 'title' in col_lower:
                column_mapping['name'] = col
            elif 'description' in col_lower or 'desc' in col_lower:
                column_mapping['description'] = col
            elif 'price' in col_lower:
                column_mapping['price'] = col
            elif 'inventory' in col_lower or 'stock' in col_lower or 'quantity' in col_lower:
                column_mapping['inventory'] = col
            elif 'image' in col_lower or 'photo' in col_lower or 'picture' in col_lower:
                column_mapping['image_urls'] = col
        
        print(f"Column mapping: {column_mapping}")
        
        # Download images
        updated_products = []
        
        for index, row in df.iterrows():
            product = {
                'sku': row.get(column_mapping.get('sku', ''), f'ITEM_{index+1}'),
                'name': row.get(column_mapping.get('name', ''), 'Unnamed Product'),
                'description': row.get(column_mapping.get('description', ''), ''),
                'price': row.get(column_mapping.get('price', ''), ''),
                'inventory': row.get(column_mapping.get('inventory', ''), ''),
                'images': []
            }
            
            # Handle multiple image URLs
            image_col = column_mapping.get('image_urls', '')
            if image_col and image_col in row and pd.notna(row[image_col]):
                image_urls = str(row[image_col]).split(',')
            else:
                image_urls = []
            
            for i, url in enumerate(image_urls):
                url = url.strip()
                if not url:
                    continue
                    
                try:
                    # Parse filename from URL
                    parsed_url = urlparse(url)
                    original_filename = os.path.basename(parsed_url.path)
                    if not original_filename:
                        original_filename = f"image_{i+1}.jpg"
                    
                    # Create new filename
                    name, ext = os.path.splitext(original_filename)
                    if not ext:
                        ext = '.jpg'
                    new_filename = f"{product['sku']}_{i+1}{ext}"
                    
                    # Download image with better headers
                    print(f"Downloading {url}")
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                    }
                    response = requests.get(url, timeout=30, headers=headers, allow_redirects=True)
                    response.raise_for_status()
                    
                    # Check if response contains image data
                    if len(response.content) < 100:
                        print(f"Warning: Very small file downloaded for {url}")
                        continue
                        
                    # Save image
                    image_path = f"images/{new_filename}"
                    with open(image_path, 'wb') as f:
                        f.write(response.content)
                    
                    # Verify file was saved
                    if os.path.exists(image_path) and os.path.getsize(image_path) > 0:
                        product['images'].append(new_filename)
                        print(f"Successfully saved: {new_filename} ({len(response.content)} bytes)")
                    else:
                        print(f"Failed to save: {new_filename}")
                    
                    # Small delay to be respectful
                    time.sleep(1)
                    
                except requests.exceptions.RequestException as e:
                    print(f"Network error downloading {url}: {e}")
                    continue
                except Exception as e:
                    print(f"Error downloading {url}: {e}")
                    continue
            
            updated_products.append(product)
        
        # Generate HTML catalog
        html_content = '''
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Idil Baby - Bulk Inventory Catalog</title>
            <style>
                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }
                
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    line-height: 1.6;
                    color: #333;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                }
                
                .container {
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 20px;
                }
                
                .header {
                    text-align: center;
                    background: rgba(255, 255, 255, 0.95);
                    padding: 40px;
                    border-radius: 20px;
                    margin-bottom: 40px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                    backdrop-filter: blur(10px);
                }
                
                .header h1 {
                    font-size: 3rem;
                    margin-bottom: 10px;
                    background: linear-gradient(45deg, #667eea, #764ba2);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    background-clip: text;
                }
                
                .header p {
                    font-size: 1.2rem;
                    color: #666;
                }
                
                .products-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                    gap: 30px;
                    margin-bottom: 40px;
                }
                
                .product-card {
                    background: rgba(255, 255, 255, 0.95);
                    border-radius: 20px;
                    overflow: hidden;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                    transition: transform 0.3s ease, box-shadow 0.3s ease;
                    backdrop-filter: blur(10px);
                }
                
                .product-card:hover {
                    transform: translateY(-10px);
                    box-shadow: 0 20px 40px rgba(0,0,0,0.15);
                }
                
                .product-images {
                    position: relative;
                    height: 250px;
                    overflow: hidden;
                    background: #f5f5f5;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                
                .product-image {
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                    display: none;
                }
                
                .product-image.active {
                    display: block;
                }
                
                .no-image {
                    color: #999;
                    font-size: 1.1rem;
                    text-align: center;
                }
                
                .image-nav {
                    position: absolute;
                    bottom: 10px;
                    left: 50%;
                    transform: translateX(-50%);
                    display: flex;
                    gap: 5px;
                }
                
                .nav-dot {
                    width: 10px;
                    height: 10px;
                    border-radius: 50%;
                    background: rgba(255,255,255,0.5);
                    cursor: pointer;
                    transition: background 0.3s ease;
                }
                
                .nav-dot.active {
                    background: white;
                }
                
                .product-info {
                    padding: 25px;
                }
                
                .product-name {
                    font-size: 1.3rem;
                    font-weight: bold;
                    margin-bottom: 10px;
                    color: #333;
                }
                
                .product-sku {
                    font-size: 0.9rem;
                    color: #666;
                    background: #f0f0f0;
                    padding: 5px 10px;
                    border-radius: 15px;
                    display: inline-block;
                    margin-bottom: 15px;
                }
                
                .product-description {
                    color: #666;
                    margin-bottom: 15px;
                }
                
                .product-details {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding-top: 15px;
                    border-top: 1px solid #eee;
                }
                
                .product-price {
                    font-size: 1.2rem;
                    font-weight: bold;
                    color: #667eea;
                }
                
                .product-inventory {
                    font-size: 0.9rem;
                    color: #28a745;
                    background: rgba(40, 167, 69, 0.1);
                    padding: 5px 10px;
                    border-radius: 15px;
                }
                
                .footer {
                    text-align: center;
                    background: rgba(255, 255, 255, 0.95);
                    padding: 30px;
                    border-radius: 20px;
                    backdrop-filter: blur(10px);
                }
                
                @media (max-width: 768px) {
                    .products-grid {
                        grid-template-columns: 1fr;
                    }
                    
                    .header h1 {
                        font-size: 2rem;
                    }
                    
                    .container {
                        padding: 10px;
                    }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>Idil Baby Catalog</h1>
                    <p>Complete Inventory Available for Bulk Purchase</p>
                </div>
                
                <div class="products-grid">
        '''
        
        for product in updated_products:
            html_content += f'''
                    <div class="product-card">
                        <div class="product-images">
            '''
            
            if product['images']:
                for i, image in enumerate(product['images']):
                    active_class = 'active' if i == 0 else ''
                    html_content += f'''
                            <img src="images/{image}" alt="{product['name']}" class="product-image {active_class}" onerror="this.style.display='none'">
                    '''
                
                if len(product['images']) > 1:
                    html_content += '''
                            <div class="image-nav">
                    '''
                    for i in range(len(product['images'])):
                        active_class = 'active' if i == 0 else ''
                        html_content += f'''
                                <div class="nav-dot {active_class}" onclick="showImage(this, {i})"></div>
                        '''
                    html_content += '''
                            </div>
                    '''
            else:
                html_content += '''
                            <div class="no-image">No Image Available</div>
                '''
            
            html_content += f'''
                        </div>
                        <div class="product-info">
                            <div class="product-name">{product['name']}</div>
                            <div class="product-sku">SKU: {product['sku']}</div>
                            <div class="product-description">{product['description']}</div>
                            <div class="product-details">
                                <div class="product-price">${product['price']}</div>
                                <div class="product-inventory">{product['inventory']} in stock</div>
                            </div>
                        </div>
                    </div>
            '''
        
        html_content += '''
                </div>
                
                <div class="footer">
                    <p>Contact us for bulk pricing and availability</p>
                </div>
            </div>
            
            <script>
                function showImage(dot, index) {
                    const card = dot.closest('.product-card');
                    const images = card.querySelectorAll('.product-image');
                    const dots = card.querySelectorAll('.nav-dot');
                    
                    images.forEach(img => img.classList.remove('active'));
                    dots.forEach(dot => dot.classList.remove('active'));
                    
                    images[index].classList.add('active');
                    dots[index].classList.add('active');
                }
            </script>
        </body>
        </html>
        '''
        
        # Save HTML file
        with open('docs/index.html', 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        # Copy images to docs folder for Pages deployment
        import shutil
        docs_images_dir = 'docs/images'
        os.makedirs(docs_images_dir, exist_ok=True)
        
        # Copy all downloaded images to docs/images
        if os.path.exists('images'):
            for filename in os.listdir('images'):
                if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp')):
                    shutil.copy2(f'images/{filename}', f'docs/images/{filename}')
                    print(f"Copied to docs: {filename}")
        
        print(f"Generated catalog with {len(updated_products)} products")
        print("HTML catalog saved to docs/index.html")
        print(f"Images copied to docs/images/ folder")
        
        EOF
        
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    permissions:
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
